package swagger

import (
	"fmt"
	"github.com/Lumicrate/gompose/http"
	"github.com/getkin/kin-openapi/openapi3"
	"reflect"
	"strings"
)

type SwaggerProvider struct{}

func NewSwaggerProvider() *SwaggerProvider {
	return &SwaggerProvider{}
}

func (s *SwaggerProvider) RegisterRoutes(engine http.HTTPEngine) {
	doc := s.Generate(engine)

	// Serve raw OpenAPI JSON
	engine.RegisterRoute("GET", "/swagger.json", func(ctx http.Context) {
		ctx.SetHeader("Content-Type", "application/json")
		ctx.JSON(200, doc)
	}, nil, false)

	// Serve Swagger UI HTML
	engine.RegisterRoute("GET", "/swagger-ui", func(ctx http.Context) {
		ctx.SetHeader("Content-Type", "text/html")
		ctx.SetStatus(200)
		ctx.Body(swaggerUIHTML("/swagger.json"))
	}, nil, false)
}

func (s *SwaggerProvider) Generate(engine http.HTTPEngine) *openapi3.T {
	doc := &openapi3.T{
		OpenAPI: "3.0.0",
		Paths:   &openapi3.Paths{},
	}

	for _, r := range engine.Routes() {
		path := r.Path
		// Convert :id â†’ {id} etc
		var pathParams openapi3.Parameters
		parts := strings.Split(path, "/")
		for i, p := range parts {
			if strings.HasPrefix(p, ":") {
				paramName := strings.TrimPrefix(p, ":")
				parts[i] = fmt.Sprintf("{%s}", paramName)
				pathParams = append(pathParams, &openapi3.ParameterRef{
					Value: &openapi3.Parameter{
						Name:     paramName,
						In:       "path",
						Required: true,
						Schema:   &openapi3.SchemaRef{Value: &openapi3.Schema{Type: &openapi3.Types{"string"}}},
					},
				})
			}
		}
		path = strings.Join(parts, "/")

		// Get existing PathItem or create new
		pathItem := doc.Paths.Find(path)
		if pathItem == nil {
			pathItem = &openapi3.PathItem{}
			doc.Paths.Set(path, pathItem)
		}

		// Create operation for this method
		var schemaRef *openapi3.SchemaRef
		if r.Entity != nil {
			schemaRef = NewSchemaRefForValue(reflect.TypeOf(r.Entity))
		}
		operation := &openapi3.Operation{
			Summary:     "Auto-generated endpoint",
			Description: "Generated by Gompose SwaggerProvider",
			Responses:   openapi3.NewResponses(),
			Parameters:  pathParams,
		}

		// Default responses
		operation.Responses.Set("200", &openapi3.ResponseRef{
			Value: &openapi3.Response{
				Description: ptrString("Successful response"),
				Content:     NewContentWithJSONSchema(schemaRef),
			},
		})

		// Request body for write methods
		if r.Method == "POST" || r.Method == "PUT" || r.Method == "PATCH" {
			operation.RequestBody = &openapi3.RequestBodyRef{
				Value: &openapi3.RequestBody{
					Description: "Request body for " + r.Method,
					Required:    true,
					Content:     NewContentWithJSONSchema(schemaRef),
				},
			}
		}

		// Attach operation to correct HTTP method
		switch r.Method {
		case "GET":
			pathItem.Get = operation
		case "POST":
			pathItem.Post = operation
		case "PUT":
			pathItem.Put = operation
		case "PATCH":
			pathItem.Patch = operation
		case "DELETE":
			pathItem.Delete = operation
		}

		if r.Protected {
			operation.Security = &openapi3.SecurityRequirements{
				{"BearerAuth": {}},
			}
		}

	}

	doc.Components = &openapi3.Components{
		SecuritySchemes: openapi3.SecuritySchemes{
			"BearerAuth": &openapi3.SecuritySchemeRef{
				Value: &openapi3.SecurityScheme{
					Type:         "http",
					Scheme:       "bearer",
					BearerFormat: "JWT",
				},
			},
		},
	}

	return doc
}

// helper to create string pointer
func ptrString(s string) *string {
	return &s
}

// NewContentWithJSONSchema creates a Content map for a JSON schema
func NewContentWithJSONSchema(schemaRef *openapi3.SchemaRef) openapi3.Content {
	if schemaRef == nil {
		schemaRef = &openapi3.SchemaRef{Value: &openapi3.Schema{Type: &openapi3.Types{"object"}}}
	}
	return openapi3.Content{
		"application/json": &openapi3.MediaType{
			Schema: schemaRef,
		},
	}
}

// NewSchemaRefForValue converts a Go struct to OpenAPI schema
func NewSchemaRefForValue(t reflect.Type) *openapi3.SchemaRef {
	if t.Kind() == reflect.Ptr {
		t = t.Elem()
	}
	schema := &openapi3.Schema{
		Type:       &openapi3.Types{"object"},
		Properties: openapi3.Schemas{},
	}

	for i := 0; i < t.NumField(); i++ {
		f := t.Field(i)
		jsonTag := strings.Split(f.Tag.Get("json"), ",")[0]
		if jsonTag == "-" || jsonTag == "" {
			continue
		}

		propSchema := &openapi3.Schema{}
		switch f.Type.Kind() {
		case reflect.String:
			propSchema.Type = &openapi3.Types{"string"}
		case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
			propSchema.Type = &openapi3.Types{"integer"}
		case reflect.Float32, reflect.Float64:
			propSchema.Type = &openapi3.Types{"number"}
		case reflect.Bool:
			propSchema.Type = &openapi3.Types{"boolean"}
		case reflect.Slice, reflect.Array:
			propSchema.Type = &openapi3.Types{"array"}
			propSchema.Items = &openapi3.SchemaRef{Value: &openapi3.Schema{Type: &openapi3.Types{"string"}}} // generic items
		default:
			propSchema.Type = &openapi3.Types{"object"} // fallback
		}

		schema.Properties[jsonTag] = &openapi3.SchemaRef{Value: propSchema}
	}

	return &openapi3.SchemaRef{Value: schema}
}

func swaggerUIHTML(jsonURL string) string {
	return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Gompose API Docs</title>
  <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/swagger-ui-dist@4/swagger-ui.css">
  <style>
    body {
      margin: 0;
      font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
      background-color: #f9fafb;
    }
    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background-color: #1f2937;
      color: #ffffff;
      padding: 12px 24px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    header h1 {
      font-size: 1.2rem;
      margin: 0;
      font-weight: normal;
    }
    header a {
      color: #9ca3af;
      text-decoration: none;
      font-size: 0.85rem;
      margin-left: 12px;
    }
    header a:hover {
      color: #ffffff;
    }
    #swagger-ui {
      margin-top: 0;
    }
  </style>
</head>
<body>
  <header>
    <h1>Gompose API Documentation</h1>
    <div>
      <a href="https://github.com/Lumicrate/gompose" target="_blank">GitHub</a>
      <a href="https://www.linkedin.com/in/unk-iman-dev" target="_blank">Designed by Iman Asgari</a>
    </div>
  </header>

  <div id="swagger-ui"></div>

  <script src="https://cdn.jsdelivr.net/npm/swagger-ui-dist@4/swagger-ui-bundle.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/swagger-ui-dist@4/swagger-ui-standalone-preset.js"></script>
  <script>
    const ui = SwaggerUIBundle({
      url: "` + jsonURL + `",
      dom_id: '#swagger-ui',
      deepLinking: true,
      presets: [
        SwaggerUIBundle.presets.apis,
        SwaggerUIStandalonePreset
      ],
      layout: "StandaloneLayout"
    })
  </script>
</body>
</html>`
}
